/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/

import { WebSiteManagementModels } from "@azure/arm-appservice";
import * as fse from 'fs-extra';
import * as path from 'path';
import * as vscode from 'vscode';
import * as appservice from "vscode-azureappservice";
import { localize } from '../../localize';
import { javaUtils } from "../../utils/javaUtils";
import { tryGetDeployableArtifacts } from "./java/tryGetDeployableArtifacts";

export async function runPreDeployTask(context: appservice.IDeployContext, siteConfig: WebSiteManagementModels.SiteConfigResource): Promise<void> {
    await appservice.runPreDeployTask(context, context.originalDeployFsPath, siteConfig.scmType);

    // only executable jar or war files generated by `preDeployTask`can be deployed to java runtime appservice, while
    // the `context.effectiveDeployFsPath` points the path of the pom file/module folder when deploying a maven module.
    // we need to modify `context.effectiveDeployFsPath` to point the executable jar or war files, of which the path
    // can only be determined after preDeployTask is run.
    if (javaUtils.isJavaRuntime(siteConfig)) {
        const fileExtensions = await javaUtils.getJavaFileExtensions(siteConfig);

        // decide module path
        const effectivePath = context.effectiveDeployFsPath;
        const isPomFile = fse.existsSync(effectivePath) && fse.lstatSync(effectivePath).isFile() && path.extname(effectivePath) === '.xml';
        const moduleFolder = isPomFile ? path.dirname(effectivePath) : effectivePath;

        // search for executable jar/war files under `${moduleFolder}/target`
        const executableArtifacts = await tryGetDeployableArtifacts(path.join(moduleFolder, 'target'));
        context.effectiveDeployFsPath = executableArtifacts?.[0] ?? '';
        // show warning if can not find executable jar/war artifacts in module.
        const message = localize('errorArtifactsNotFoundJava', 'Only "{0}" files can be deployed to "{1}", but there are no {0} artifacts found in maven module "{2}"', `${fileExtensions}`, siteConfig.name, moduleFolder);
        (!context.effectiveDeployFsPath || !fileExtensions?.includes(path.extname(context.effectiveDeployFsPath).substr(1))) && void vscode.window.showWarningMessage(message);
    }
}
